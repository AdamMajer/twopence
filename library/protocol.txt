Custom protocol
===============

The virtio and serial plugins use a custom protocol to communicate with
the system under tests.


Packet structure:

  0:	byte	Packet type
  1:	byte	Reserved
  2:	word	overall packet length
  4:	word	client ID
  6:	word	transaction ID
  8:		data

All header words are in network byte order (aka big-endian)


Packet types:

        local => system under tests
  'c'           run command
  'i'           insert file
  'e'           extract file
  'q'           quit
  'I'           interrupt command

        system under tests => local
  'M'           major error code
  'm'           minor error code
  'T'           command timeout

            both directions
  'h'		hello packet (used to establish the client ID for all subsequent packets)
  'D'		channel data
  'X'		channel eof
  'K'		keepalive packet

The length includes the 4 bytes of the header.


Parameters are separated with spaces:

  run command   username timeout command
  insert file   username filemode filename
  extract file  username filename

New-style commands

  hello		uint8: protocol major version
  		uint8: protocol minor version
		uint16: requested keepalive interval
  chan_data	uint16:	channel_id (commands: 0, 1, 2; extract/inject: 0)
  		followed by the payload
  chan_eof	uint16: channel_id (commands: 0, 1, 2; extract/inject: 0)
